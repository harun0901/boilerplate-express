/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/
 
var bGround = require('fcc-express-bground');
var myApp = require('./myApp');
var express = require('express');
var app = express();
var bodyParser = require("body-parser");

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
};

app.use(bodyParser.urlencoded({extended: false}));
app.use(bodyParser.json());

app.use("/public", express.static(__dirname + "/public"));

app.get("/", function(req, res) {
  
  res.sendFile(__dirname + "/views/index.html");
  
});

app.use(function middleware(req, res, next) {
  let log = req.method + " " + req.path + " - " + req.ip;
  console.log("log", log);
  next();
});

app.get("/now", function middleware(req, res, next) {
  req. time = new Date().toString();
  next();
}, function(req, res) {
  res.json({
    time: req.time
  });
});

// app.get("/name", function(req, res) {

//   let firstName = req.query.first;
//   let lastName = req.query.last;
//   res.json({
//     name: `${firstName} ${lastName}`
//   });
// });

app.post('/name', function(req, res) {
  var string = req.body.first + " " + req.body.last;
  res.json({ name: string });
})

app.get("/:word/echo", (req, res) => {
  const { word } = req.params;
  res.json({
    echo:  word
  });
});

let response ="Hello World";

if(process.env.MESSAGE_STYLE === "uppercase") {
  response = response.toUpperCase();
} 
app.get("/json", (req, res) => {
  res.json({
    message: response
  });
});


var port = process.env.PORT || 3000;
bGround.setupBackgroundApp(app, myApp, __dirname).listen(port, function(){
  bGround.log('Node is listening on port '+ port + '...')
});



/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

